# Copyright (c) 2019-2020-2021-2022-2023 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
#
# The peculiarity of this workflow is that assumes vcpkg stored as a submodule of 
# this repository.
# The workflow does the following:
# - Sets up vcpkg if needed, then run CMake with CMakePreset.json using a configuration
#   that leverages the vcpkg's toolchain file. This will automatically run vcpkg to install
#   dependencies described by the vcpkg.json manifest file. 
#   vcpkg's Binary Caching backed by GH Action cache is being used. It will be a no-op if 
#   dependencies are restored from GH Action cache.
# - Finally builds the sources with Ninja.
name: windows-cmake-vcpkg-build
on: [pull_request, workflow_dispatch]

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          # This is useful to avoid https://github.com/microsoft/vcpkg/issues/25349
          # which is caused by missing Git history on the vcpkg submodule which ports 
          # try to access. 
          # Do not use if not needed, since it slows down the checkout of sources.
          fetch-depth: 0

      - uses: lukka/get-cmake@latest

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        with:
          # This one is not needed, as it is the default value anyway.
          # vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Prints output of run-vcpkg's action.
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "
      - name: Run CMake+vcpkg+Ninja
        uses: lukka/run-cmake@v10
        id: runcmake
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          configurePreset: 'x64-release'
          buildPreset: 'build-release'
      - name: List $RUNNER_WORKSPACE after build
        run: find $RUNNER_WORKSPACE
        shell: bash
